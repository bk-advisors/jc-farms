Batch_4
)
)
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category")
View(final_pnl)
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
pnl_data <- read_excel("data/JC Poultry Farm - Business Operating Model_v1_250323.xlsx",
sheet = "PnL",
skip = 3)  # Skip the first 3 rows to get to the data
# Clean and transform the data
pnl_statement <- pnl_data %>%
# Remove any NA rows
filter(!is.na(`Category`)) %>%
# Rename columns for clarity
rename(
Category = `Category`,
description = `Description`,
Batch_1 = `Amount (UGX)...3`,
Batch_2 = `Amount (UGX)...4`,
Batch_3 = `Amount (UGX)...5`
) %>%
# Select only the relevant columns
select(Category, Batch_1, Batch_2, Batch_3)
# Read CSV data
transactions <- read.csv("data/jc_farms_transaction_data_20250327_v2.csv")
# Filter and aggregate Batch_4 data
batch4 <- transactions %>%
filter(Select.Batch.Number == "Batch 4") %>%
mutate(
Category = case_when(
Select.Account.Type == "Revenues" ~ Select.Category.3,
Select.Account.Type == "Cost of Goods Sold (COGS)" ~ Select.Category.2,
Select.Account.Type == "Operating Expenditure (OPEX)" ~ Select.Category.1,
TRUE ~ NA_character_
),
Amount = as.numeric(gsub(",", "", Amount..UGX.))
) %>%
filter(!is.na(Category)) %>%
group_by(Category) %>%
summarise(Batch_4 = sum(Amount, na.rm = TRUE))
#Sub-setting the 1 cell I want to change
batch4$Category[5] <- "Sales Revenue"
# Create full category structure
categories <- data.frame(
Category = c(
"Revenues", "Sales Revenue", "Cost of Goods Sold (COGS)", "Feed Costs",
"Veterinary Supplies", "Chicks Purchased", "Other Direct Costs",
"Operating Expenses (OPEX)", "Salaries and Wages", "Utilities (Electricity, Water, etc.)",
"Transportation Costs", "Marketing Expenses", "Other Operating Expenses",
"Net Profit/Loss"
)
)
batch4_full <- categories %>%
left_join(batch4, by = "Category") %>%
mutate(Batch_4 = coalesce(Batch_4, 0)) %>%
# Calculate totals
mutate(Batch_4 = case_when(
Category == "Revenues" ~ sum(Batch_4[Category == "Sales Revenue"]),
Category == "Cost of Goods Sold (COGS)" ~ sum(Batch_4[Category %in% c("Feed Costs", "Veterinary Supplies", "Chicks Purchased", "Other Direct Costs")]),
Category == "Operating Expenses (OPEX)" ~ sum(Batch_4[Category %in% c("Salaries and Wages", "Utilities (Electricity, Water, etc.)", "Transportation Costs", "Marketing Expenses", "Other Operating Expenses")]),
TRUE ~ Batch_4
))
batch4_full <- batch4_full |>
mutate(
Batch_4 = ifelse(
Category == "Net Profit/Loss",
Batch_4[Category == "Revenues"] -
(Batch_4[Category == "Cost of Goods Sold (COGS)"] +
Batch_4[Category == "Operating Expenses (OPEX)"]),
Batch_4
)
)
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category")
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
final_pnl |>
kbl(caption = "JC Farms Profit/Loss Statement") |>
kable_paper("striped", full_width = F) %>%
add_indent(c(2, 4, 5,6,7,9,10,11,12,13)) |>
row_spec(c(1,3,8,14), bold = T, color = "white", background = "#4287f5")
library(tidyverse)
library(lubridate)
library(highcharter)
library(DT)
library(bslib)
library(bsicons)
library(shiny)
library(gt)
library(glue)
library(gtExtras)
library(kableExtra)
library(readxl)
library(scales)
library(formattable)
# Source functions
source(file="./R-scripts/00-functions.R")
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250327_v2.csv",
stringsAsFactors = FALSE
)
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250328.csv",
stringsAsFactors = FALSE
)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
df$Date.of.Transaction <- as.Date(df$Date.of.Transaction, format="%Y-%m-%d")
df$Quantity <- as.numeric(df$Quantity)
df$Amount_UGX <- as.numeric(df$Amount_UGX)
jc_pnl_by_batch(df_raw,5)
jc_pnl_by_batch(df_raw,"5")
# Read CSV data
transactions <- df_raw
# Filter and aggregate Batch_4 data
batch4 <- transactions %>%
filter(Select.Batch.Number == "Batch 4") %>%
mutate(
Category = case_when(
Select.Account.Type == "Revenues" ~ Select.Category.3,
Select.Account.Type == "Cost of Goods Sold (COGS)" ~ Select.Category.2,
Select.Account.Type == "Operating Expenditure (OPEX)" ~ Select.Category.1,
TRUE ~ NA_character_
),
Amount = as.numeric(gsub(",", "", Amount..UGX.))
) %>%
filter(!is.na(Category)) %>%
group_by(Category) %>%
summarise(Batch_4 = sum(Amount, na.rm = TRUE))
#Sub-setting the 1 cell I want to change
batch4$Category[5] <- "Sales Revenue"
# Create full category structure
categories <- data.frame(
Category = c(
"Revenues", "Sales Revenue", "Cost of Goods Sold (COGS)", "Feed Costs",
"Veterinary Supplies", "Chicks Purchased", "Other Direct Costs",
"Operating Expenses (OPEX)", "Salaries and Wages", "Utilities (Electricity, Water, etc.)",
"Transportation Costs", "Marketing Expenses", "Other Operating Expenses",
"Net Profit/Loss"
)
)
batch4_full <- categories %>%
left_join(batch4, by = "Category") %>%
mutate(Batch_4 = coalesce(Batch_4, 0)) %>%
# Calculate totals
mutate(Batch_4 = case_when(
Category == "Revenues" ~ sum(Batch_4[Category == "Sales Revenue"]),
Category == "Cost of Goods Sold (COGS)" ~ sum(Batch_4[Category %in% c("Feed Costs", "Veterinary Supplies", "Chicks Purchased", "Other Direct Costs")]),
Category == "Operating Expenses (OPEX)" ~ sum(Batch_4[Category %in% c("Salaries and Wages", "Utilities (Electricity, Water, etc.)", "Transportation Costs", "Marketing Expenses", "Other Operating Expenses")]),
TRUE ~ Batch_4
))
batch4_full <- batch4_full |>
mutate(
Batch_4 = ifelse(
Category == "Net Profit/Loss",
Batch_4[Category == "Revenues"] -
(Batch_4[Category == "Cost of Goods Sold (COGS)"] +
Batch_4[Category == "Operating Expenses (OPEX)"]),
Batch_4
)
)
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category")
pnl_data <- read_excel("data/JC Poultry Farm - Business Operating Model_v1_250323.xlsx",
sheet = "PnL",
skip = 3)  # Skip the first 3 rows to get to the data
# Clean and transform the data
pnl_statement <- pnl_data %>%
# Remove any NA rows
filter(!is.na(`Category`)) %>%
# Rename columns for clarity
rename(
Category = `Category`,
description = `Description`,
Batch_1 = `Amount (UGX)...3`,
Batch_2 = `Amount (UGX)...4`,
Batch_3 = `Amount (UGX)...5`
) %>%
# Select only the relevant columns
select(Category, Batch_1, Batch_2, Batch_3)
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category")
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
final_pnl |>
kbl(caption = "JC Farms Profit/Loss Statement") |>
kable_paper("striped", full_width = F) %>%
add_indent(c(2, 4, 5,6,7,9,10,11,12,13)) |>
row_spec(c(1,3,8,14), bold = T, color = "white", background = "#4287f5")
# Source functions
source(file="./R-scripts/00-functions.R")
jc_pnl_by_batch(df_raw,"Batch 5")
kpis7 <- jc_dashboard_kpis(df,"Batch 7",344)
value_box(
title = "Cost of Production",
value = kpis7[1],
showcase = bsicons::bs_icon("twitter"),
theme = "pink"
)
value_box(
title = "Cost per Bird",
value = kpis7[2],
showcase = bsicons::bs_icon("twitter"),
theme = "pink"
)
# Source functions
source(file="./R-scripts/00-functions.R")
jc_pnl_by_batch(df_raw,"Batch 5")
batch5_full <- jc_pnl_by_batch(df_raw,"Batch 5")
# Source functions
source(file="./R-scripts/00-functions.R")
batch5_full <- jc_pnl_by_batch(df_raw,"Batch 5")
View(batch5_full)
pnl_data <- read_excel("data/JC Poultry Farm - Business Operating Model_v1_250323.xlsx",
sheet = "PnL",
skip = 3)  # Skip the first 3 rows to get to the data
# Clean and transform the data
pnl_statement <- pnl_data %>%
# Remove any NA rows
filter(!is.na(`Category`)) %>%
# Rename columns for clarity
rename(
Category = `Category`,
description = `Description`,
"Batch 1" = `Amount (UGX)...3`,
"Batch 2" = `Amount (UGX)...4`,
"Batch 3" = `Amount (UGX)...5`
) %>%
# Select only the relevant columns
select(Category, "Batch 1", "Batch 2", "Batch 3")
View(pnl_statement)
batch4_full <- jc_pnl_by_batch(df_raw,"Batch 4")
batch5_full <- jc_pnl_by_batch(df_raw,"Batch 5")
batch6_full <- jc_pnl_by_batch(df_raw,"Batch 6")
View(batch4_full)
View(batch5_full)
View(batch6_full)
# Merge with original PnL
final_pnl <- pnl_statement %>%
join_all(list(batch4_full,batch5_full,batch6_full), by='Category', type='left')
library(plyr)
# Merge with original PnL
final_pnl <- pnl_statement %>%
join_all(list(batch4_full,batch5_full,batch6_full), by='Category', type='left')
# Merge with original PnL
final_pnl <- pnl_statement %>%
join_all(list(batch4_full,batch5_full,batch6_full), by='Category', type='left')
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category") |>
left_join(batch5_full, by = "Category") |>
left_join(batch6_full, by = "Category")
View(final_pnl)
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
View(final_pnl)
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
final_pnl |>
kbl(caption = "JC Farms Profit/Loss Statement") |>
kable_paper("striped", full_width = F) %>%
add_indent(c(2, 4, 5,6,7,9,10,11,12,13)) |>
row_spec(c(1,3,8,14), bold = T, color = "white", background = "#4287f5")
library(tidyverse)
library(lubridate)
library(highcharter)
library(DT)
library(bslib)
library(bsicons)
library(shiny)
library(gt)
library(glue)
library(gtExtras)
library(kableExtra)
library(readxl)
library(scales)
library(formattable)
library(plyr)
# Source functions
source(file="./R-scripts/00-functions.R")
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250328.csv",
stringsAsFactors = FALSE
)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
View(df_raw)
?rename
library(dbplyr)
detach("package:dplyr", unload = TRUE)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
library(tidyverse)
library(lubridate)
library(highcharter)
library(DT)
library(bslib)
library(bsicons)
library(shiny)
library(gt)
library(glue)
library(gtExtras)
library(kableExtra)
library(readxl)
library(scales)
library(formattable)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
detach("package:dbplyr", unload = TRUE)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
detach("package:plyr", unload = TRUE)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
library(dplyr)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
df$Date.of.Transaction <- as.Date(df$Date.of.Transaction, format="%Y-%m-%d")
df$Quantity <- as.numeric(df$Quantity)
df$Amount_UGX <- as.numeric(df$Amount_UGX)
# Calling a function, we created, that takes in 3 inputs; data, batch_num and num_birds to derive key metrics
#| title: Key Performance Metrics
kpis4 <- jc_dashboard_kpis(df,"Batch 4",245)
kpis5 <- jc_dashboard_kpis(df,"Batch 5",200)
kpis6 <- jc_dashboard_kpis(df,"Batch 6",346)
pnl_data <- read_excel("data/JC Poultry Farm - Business Operating Model_v1_250323.xlsx",
sheet = "PnL",
skip = 3)  # Skip the first 3 rows to get to the data
# Clean and transform the data
pnl_statement <- pnl_data %>%
# Remove any NA rows
filter(!is.na(`Category`)) %>%
# Rename columns for clarity
rename(
Category = `Category`,
description = `Description`,
"Batch 1" = `Amount (UGX)...3`,
"Batch 2" = `Amount (UGX)...4`,
"Batch 3" = `Amount (UGX)...5`
) %>%
# Select only the relevant columns
select(Category, "Batch 1", "Batch 2", "Batch 3")
batch4_full <- jc_pnl_by_batch(df_raw,"Batch 4")
batch5_full <- jc_pnl_by_batch(df_raw,"Batch 5")
batch6_full <- jc_pnl_by_batch(df_raw,"Batch 6")
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category") |>
left_join(batch5_full, by = "Category") |>
left_join(batch6_full, by = "Category")
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
final_pnl |>
kbl(caption = "JC Farms Profit/Loss Statement") |>
kable_paper("striped", full_width = F) %>%
add_indent(c(2, 4, 5,6,7,9,10,11,12,13)) |>
row_spec(c(1,3,8,14), bold = T, color = "white", background = "#4287f5")
library(tidyverse)
library(lubridate)
library(highcharter)
library(DT)
library(bslib)
library(bsicons)
library(shiny)
library(gt)
library(glue)
library(gtExtras)
library(kableExtra)
library(readxl)
library(scales)
library(formattable)
# Source functions
source(file="./R-scripts/00-functions.R")
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250402.csv",
stringsAsFactors = FALSE
)
df <- df_raw |>
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) |>
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
df$Date.of.Transaction <- as.Date(df$Date.of.Transaction, format="%Y-%m-%d")
df$Quantity <- as.numeric(df$Quantity)
df$Amount_UGX <- as.numeric(df$Amount_UGX)
# Calling a function, we created, that takes in 3 inputs; data, batch_num and num_birds to derive key metrics
#| title: Key Performance Metrics
kpis4 <- jc_dashboard_kpis(df,"Batch 4",245)
kpis5 <- jc_dashboard_kpis(df,"Batch 5",200)
kpis6 <- jc_dashboard_kpis(df,"Batch 6",346)
kpis7 <- jc_dashboard_kpis(df,"Batch 7",344)
kpis8 <- jc_dashboard_kpis(df,"Batch 8",300)
pnl_data <- read_excel("data/JC Poultry Farm - Business Operating Model_v1_250323.xlsx",
sheet = "PnL",
skip = 3)  # Skip the first 3 rows to get to the data
# Clean and transform the data
pnl_statement <- pnl_data %>%
# Remove any NA rows
filter(!is.na(`Category`)) %>%
# Rename columns for clarity
rename(
Category = `Category`,
description = `Description`,
"Batch 1" = `Amount (UGX)...3`,
"Batch 2" = `Amount (UGX)...4`,
"Batch 3" = `Amount (UGX)...5`
) %>%
# Select only the relevant columns
select(Category, "Batch 1", "Batch 2", "Batch 3")
batch4_full <- jc_pnl_by_batch(df_raw,"Batch 4")
batch5_full <- jc_pnl_by_batch(df_raw,"Batch 5")
batch6_full <- jc_pnl_by_batch(df_raw,"Batch 6")
# Merge with original PnL
final_pnl <- pnl_statement %>%
left_join(batch4_full, by = "Category") |>
left_join(batch5_full, by = "Category") |>
left_join(batch6_full, by = "Category")
# Format numbers with commas
final_pnl <- final_pnl %>%
mutate(across(starts_with("Batch"), ~format(., big.mark = ",", scientific = FALSE)))
final_pnl |>
kbl(caption = "JC Farms Profit/Loss Statement") |>
kable_paper("striped", full_width = F) %>%
add_indent(c(2, 4, 5,6,7,9,10,11,12,13)) |>
row_spec(c(1,3,8,14), bold = T, color = "white", background = "#4287f5")
## install.packages("remotes")
remotes::install_gitlab("dickoa/robotoolbox")
install.packages("robotoolbox")
## install.packages("remotes")
remotes::install_gitlab("dickoa/robotoolbox")
get.packages <- function(packages, Base_R_Best_R = F){
if(Base_R_Best_R){
print("No packages required!")
}
else{
for(i in seq.int(length(packages))){
if(!require(packages[i], character.only = T)){
install.packages(packages[i])
}
library(packages[i], character.only = T)
}
}
}
#example
get.packages(c("crul", "RcppSimdJson", "dm","labelled"))
## install.packages("remotes")
remotes::install_gitlab("dickoa/robotoolbox")
