# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_summary, filter = "top")
# -----------------------------------------------------------
# 3. Summarize amounts by batch and account type
# -----------------------------------------------------------
df_summary <- df %>%
filter(Batch_Number != "Batch 3") |>
# Group by the batch and the account type (Revenue, COGS, etc.)
group_by(Batch_Number, Select.Account.Type) %>%
# Sum the amounts for each grouping
summarise(
Total_Amount = sum(Amount_UGX, na.rm = TRUE),
.groups = "drop"  # keep summarise from adding grouping structure
) %>%
# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_summary, filter = "top")
# -----------------------------------------------------------
# 3. Summarize amounts by batch and account type
# -----------------------------------------------------------
df_summary <- df %>%
select(-('`Capital Expenditure (CAPEX)`')) |>
filter(Batch_Number != "Batch 3") |>
# Group by the batch and the account type (Revenue, COGS, etc.)
group_by(Batch_Number, Select.Account.Type) %>%
# Sum the amounts for each grouping
summarise(
Total_Amount = sum(Amount_UGX, na.rm = TRUE),
.groups = "drop"  # keep summarise from adding grouping structure
) %>%
# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
# -----------------------------------------------------------
# 3. Summarize amounts by batch and account type
# -----------------------------------------------------------
df_summary <- df %>%
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3") |>
# Group by the batch and the account type (Revenue, COGS, etc.)
group_by(Batch_Number, Select.Account.Type) %>%
# Sum the amounts for each grouping
summarise(
Total_Amount = sum(Amount_UGX, na.rm = TRUE),
.groups = "drop"  # keep summarise from adding grouping structure
) %>%
# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
# -----------------------------------------------------------
# 2. (Optional) Clean or rename columns for easier reference
# -----------------------------------------------------------
# Sometimes R automatically converts special characters (spaces, parentheses).
# If your 'Amount (UGX)' column is not easy to reference, rename it:
df <- df_raw %>%
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) %>%
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
# -----------------------------------------------------------
# 3. Summarize amounts by batch and account type
# -----------------------------------------------------------
df_summary <- df |>
# Group by the batch and the account type (Revenue, COGS, etc.)
group_by(Batch_Number, Select.Account.Type) %>%
# Sum the amounts for each grouping
summarise(
Total_Amount = sum(Amount_UGX, na.rm = TRUE),
.groups = "drop"  # keep summarise from adding grouping structure
) %>%
# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
write.csv(df, "./data/JC_Farms_Data.csv", row.names = FALSE)
write.csv(df_summary, "./data/JC_Farms_PnL_Summary.csv", row.names = FALSE)
# Step 1: Identify the transactions that represent "Chicks Purchased"
# (assuming "Chicks Purchased" is indicated in `Select.Category.2`)
df_birds <- df %>%
filter(Select.Category.2 == "Chicks Purchased") %>%
group_by(Batch_Number) %>%
summarise(
Total_Birds = mean(Quantity, na.rm = TRUE),
.groups = "drop"
)
View(df)
View(df_birds)
# Step 2: Join total birds to your P&L summary
df_pnl_with_birds <- df_summary %>%
left_join(df_birds, by = "Batch_Number") %>%
mutate(
Cost_per_Bird = ifelse(
!is.na(Total_Birds) & Total_Birds > 0,
(Total_Cost / Total_Birds),
Profit_per_Bird = ifelse(
!is.na(Total_Birds) & Total_Birds > 0,
Net_Profit / Total_Birds
)
)
)
# Step 2: Join total birds to your P&L summary
df_pnl_with_birds <- df_summary %>%
left_join(df_birds, by = "Batch_Number") %>%
mutate(
Cost_per_Bird = (Total_Cost / Total_Birds),
Profit_per_Bird = (Net_Profit / Total_Birds)
)
View(df_pnl_with_birds)
# Number of dead birds
dead_birds <- 3
# Step 1: Identify the transactions that represent "Chicks Purchased"
# (assuming "Chicks Purchased" is indicated in `Select.Category.2`)
df_birds <- df %>%
filter(Select.Category.2 == "Chicks Purchased") %>%
group_by(Batch_Number) %>%
summarise(
Total_Birds = mean(Quantity - dead_birds, na.rm = TRUE),
.groups = "drop"
)
View(df_birds)
# Step 2: Join total birds to your P&L summary
df_pnl_with_birds <- df_summary %>%
left_join(df_birds, by = "Batch_Number") %>%
mutate(
Cost_per_Bird = (Total_Cost / Total_Birds),
Profit_per_Bird = (Net_Profit / Total_Birds)
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_pnl_with_birds, filter = "top")
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250310.csv",
stringsAsFactors = FALSE
)
# -----------------------------------------------------------
# 2. (Optional) Clean or rename columns for easier reference
# -----------------------------------------------------------
# Sometimes R automatically converts special characters (spaces, parentheses).
# If your 'Amount (UGX)' column is not easy to reference, rename it:
df <- df_raw %>%
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) %>%
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250310.csv",
stringsAsFactors = FALSE
)
# -----------------------------------------------------------
# 2. (Optional) Clean or rename columns for easier reference
# -----------------------------------------------------------
# Sometimes R automatically converts special characters (spaces, parentheses).
# If your 'Amount (UGX)' column is not easy to reference, rename it:
df <- df_raw %>%
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) %>%
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
# -----------------------------------------------------------
# 3. Summarize amounts by batch and account type
# -----------------------------------------------------------
df_summary <- df |>
# Group by the batch and the account type (Revenue, COGS, etc.)
group_by(Batch_Number, Select.Account.Type) %>%
# Sum the amounts for each grouping
summarise(
Total_Amount = sum(Amount_UGX, na.rm = TRUE),
.groups = "drop"  # keep summarise from adding grouping structure
) %>%
# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_summary, filter = "top")
# Number of dead birds
dead_birds <- 3
# Step 1: Identify the transactions that represent "Chicks Purchased"
# (assuming "Chicks Purchased" is indicated in `Select.Category.2`)
df_birds <- df %>%
filter(Select.Category.2 == "Chicks Purchased") %>%
group_by(Batch_Number) %>%
summarise(
Total_Birds = mean(Quantity - dead_birds, na.rm = TRUE),
.groups = "drop"
)
# Step 2: Join total birds to your P&L summary
df_pnl_with_birds <- df_summary %>%
left_join(df_birds, by = "Batch_Number") %>%
mutate(
Cost_per_Bird = (Total_Cost / Total_Birds),
Profit_per_Bird = (Net_Profit / Total_Birds)
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_pnl_with_birds, filter = "top")
library(tidyverse)
ggplot(mpg, aes(x=cty, y=hwy)) +
geom_point()
library(highcharter)
hchart(mpg, "scatter", hcaes(x=cty, y=hwy), name = "MPG Dataset Scatter Plot", showInLegend = TRUE)
?mpg
ggplot(mpg, aes(x=cty, y=hwy)) +
geom_point()
hchart(mpg, "scatter", hcaes(x=cty, y=hwy), name = "City miles per gallon vs Highway miles per gallon", showInLegend = TRUE)
#| title: Drive types
hchart(mpg, "column", hcaes(x=drv), name = "Drive Types", showInLegend = FALSE)
#| title: Drive types
hchart(mpg, "bar", hcaes(x=drv), name = "Drive Types", showInLegend = FALSE)
?hchart
head(mpg)
#| title: Drive types
hchart(mpg, "bar", hcaes(x=drv, y=drv), name = "Drive Types", showInLegend = FALSE)
#| title: Drive types
hchart(mpg, "bar", hcaes(x=drv, y=model), name = "Drive Types", showInLegend = FALSE)
#| title: Drive types
hchart(mpg, "column", hcaes(x=drv), name = "Drive Types", showInLegend = FALSE)
#| title: Drive types
hchart(mpg, "column", hcaes(x=drv, y=trans), name = "Drive Types", showInLegend = FALSE)
#| title: Drive types
hchart(mpg, "scatter", hcaes(x=drv, y=trans), name = "Drive Types", showInLegend = FALSE)
#| title: Drive types
hchart(mpg, "scatter", hcaes(x=displ, y=cyl), name = "Drive Types", showInLegend = FALSE)
library(tidyverse)
library(lubridate)
library(highcharter)
library(DT)
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250312.csv",
stringsAsFactors = FALSE
)
# -----------------------------------------------------------
# 2. (Optional) Clean or rename columns for easier reference
# -----------------------------------------------------------
# Sometimes R automatically converts special characters (spaces, parentheses).
# If your 'Amount (UGX)' column is not easy to reference, rename it:
df <- df_raw %>%
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) %>%
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
View(df)
# -----------------------------------------------------------
# 3. Summarize amounts by batch and account type
# -----------------------------------------------------------
df_summary <- df |>
# Group by the batch and the account type (Revenue, COGS, etc.)
group_by(Batch_Number, Select.Account.Type) %>%
# Sum the amounts for each grouping
summarise(
Total_Amount = sum(Amount_UGX, na.rm = TRUE),
.groups = "drop"  # keep summarise from adding grouping structure
) %>%
# Pivot so each account type becomes a column (COGS, OPEX, Revenues, CAPEX)
pivot_wider(
names_from  = Select.Account.Type,
values_from = Total_Amount,
values_fill = 0  # fill missing combinations with 0
) %>%
# Create a Total Costs and Net Profit column
mutate(
Total_Cost = `Cost of Goods Sold (COGS)` + `Operating Expenditure (OPEX)`,
Net_Profit = Revenues - Total_Cost
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_summary, filter = "top")
# Number of dead birds
dead_birds <- 3
# Step 1: Identify the transactions that represent "Chicks Purchased"
# (assuming "Chicks Purchased" is indicated in `Select.Category.2`)
df_birds <- df %>%
filter(Select.Category.2 == "Chicks Purchased") %>%
group_by(Batch_Number) %>%
summarise(
Total_Birds = mean(Quantity - dead_birds, na.rm = TRUE),
.groups = "drop"
)
# Step 2: Join total birds to your P&L summary
df_pnl_with_birds <- df_summary %>%
left_join(df_birds, by = "Batch_Number") %>%
mutate(
Cost_per_Bird = (Total_Cost / Total_Birds),
Profit_per_Bird = (Net_Profit / Total_Birds)
)
# -----------------------------------------------------------
# 4. Make a table of the summarized P&L data
# -----------------------------------------------------------
datatable(df_pnl_with_birds, filter = "top")
library(tidyverse)
library(lubridate)
library(highcharter)
library(DT)
# -----------------------------------------------------------
# 1. Read CSV data
#
# -----------------------------------------------------------
df_raw <- read.csv(
file = "./data/jc_farms_transaction_data_20250312.csv",
stringsAsFactors = FALSE
)
# -----------------------------------------------------------
# 2. (Optional) Clean or rename columns for easier reference
# -----------------------------------------------------------
# Sometimes R automatically converts special characters (spaces, parentheses).
# If your 'Amount (UGX)' column is not easy to reference, rename it:
df <- df_raw %>%
rename(
Amount_UGX = `Amount..UGX.`,
Batch_Number = `Select.Batch.Number`
) %>%
filter( Select.Account.Type != "Capital Expenditure (CAPEX)") |>
filter(Batch_Number != "Batch 3")
View(df)
# Convert relevant columns to appropriate data types
df$Date.of.Transaction <- as.Date(data$Date.of.Transaction, format="%Y-%m-%d")
# Convert relevant columns to appropriate data types
df$Date.of.Transaction <- as.Date(df$Date.of.Transaction, format="%Y-%m-%d")
df$Quantity <- as.numeric(df$Quantity)
data$Amount_UGX. <- as.numeric(df$Amount_UGX)
df$Amount_UGX <- as.numeric(df$Amount_UGX)
jc_dashboard_kpis <- function(data, batch_num) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# 1) Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(batch_num) %>%
summarise(Total.Revenue = sum(Amount_UGX, na.rm = TRUE))
return(revenues_by_batch)
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(Batch_Number) %>%
summarise(Total.Revenue = sum(Amount_UGX, na.rm = TRUE))
return(revenues_by_batch)
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(Batch_Number) %>%
summarise(Total.Revenue = sum(Amount_UGX, na.rm = TRUE))
p <- print(revenues_by_batch)
return(p)
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num, num_birds) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(Batch_Number) %>%
summarise(Total.Revenue = sum(Amount_UGX, na.rm = TRUE))
return(revenues_by_batch)
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num, num_birds) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(Batch_Number) %>%
summarise(Total_Revenue = sum(Amount_UGX, na.rm = TRUE))
return(revenues_by_batch)
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num, num_birds) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(Batch_Number) %>%
summarise(Total_Revenue = sum(Amount_UGX, na.rm = TRUE))
print(revenues_by_batch)
return()
}
jc_dashboard_kpis(df,"Batch 4")
jc_dashboard_kpis <- function(data, batch_num, num_birds) {
# 1st KPI - Total Revenues
# Filter data for selected batch only
filtered_data <- data |>
filter(Batch_Number == batch_num) |>
# Filter for Revenue only
filter(Select.Account.Type == "Revenues")
# Revenues by Batch Number
revenues_by_batch <- filtered_data %>%
group_by(Batch_Number) %>%
summarise(Total_Revenue = sum(Amount_UGX, na.rm = TRUE))
print(revenues_by_batch)
#return()
}
jc_dashboard_kpis(df,"Batch 4")
